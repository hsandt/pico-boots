require("engine/test/bustedhelper")
require("engine/core/vector_ext_magnitude")

describe('magnitude', function ()
  it('(4 3) => 5', function ()
    assert.is_true(almost_eq(vector(4, 3):magnitude(), 5))
  end)
  it('(-4 3) => 5', function ()
    assert.is_true(almost_eq(vector(-4, 3):magnitude(), 5))
  end)
  it('(9 -14.2) => 16.811900547', function ()
    assert.is_true(almost_eq(vector(9, -14.2):magnitude(), 16.811900547))
  end)
  it('(0 0) => 0', function ()
    assert.are_equal(0, vector.zero():magnitude())
  end)
end)

describe('normalized', function ()
  it('(1 -1) => (0.707... -0.707...)', function ()
    assert.is_true(vector(1, -1):normalized():almost_eq(vector(0.707, -0.707)))
  end)
  it('(4 3) => (0.8 0.6)', function ()
    assert.is_true(vector(4, 3):normalized():almost_eq(vector(0.8, 0.6)))
  end)
  it('(0.00004 0.00003) => (0.8 0.6)', function ()
    assert.is_true(vector(0.00004, 0.00003):normalized():almost_eq(vector(0.8, 0.6)))
  end)
  it('(0 0) => (0 0)', function ()
    local vec = vector.zero()
    local normalized_vec = vec:normalized()
    assert.is_true(normalized_vec:almost_eq(vector.zero()))
    -- check that a copy of the vector is returned, not the same ref
    assert.is_false(rawequal(normalized_vec, vec))
  end)
end)

describe('normalize', function ()
  it('(1 -1) => (0.707... -0.707...) in place', function ()
    local v = vector(1, -1)
    v:normalize()
    assert.is_true(v:almost_eq(vector(0.707, -0.707)))
  end)
  it('(4 3) => (0.8 0.6) in place', function ()
    local v = vector(4, 3)
    v:normalize()
    assert.is_true(v:almost_eq(vector(0.8, 0.6)))
  end)
  it('(0 0) => (0 0) in place', function ()
    local v = vector(0, 0)
    v:normalize()
    assert.are_same(vector(0, 0), v)
  end)
end)

describe('with_clamped_magnitude', function ()
  it('(1 -1).with_clamped_magnitude(1) => (0.707... -0.707...)', function ()
    assert.is_true(vector(1, -1):with_clamped_magnitude(1):almost_eq(vector(0.707, -0.707)))
  end)
  it('(4 3).with_clamped_magnitude(5) => (4 3)', function ()
    local vec = vector(4, 3)
    local clamped_vec = vec:with_clamped_magnitude(5)
    assert.are_equal(clamped_vec, vector(4, 3))
    -- check that a copy of the vector is returned, not the same ref
    assert.is_false(rawequal(clamped_vec, vec))
  end)
  it('(4 3).with_clamped_magnitude(0) => (0 0)', function ()
    assert.is_true(vector(4, 3):with_clamped_magnitude(0):almost_eq(vector(0, 0)))
  end)
  it('(0 0).with_clamped_magnitude(5) => (0 0)', function ()
    assert.is_true(vector(0, 0):with_clamped_magnitude(5):almost_eq(vector(0, 0)))
  end)
  it('(0 0).with_clamped_magnitude(0) => (0 0)', function ()
    assert.is_true(vector(0, 0):with_clamped_magnitude(0):almost_eq(vector(0, 0)))
  end)
  it('(4 3).with_clamped_magnitude(-10) => (4 3)', function ()
    assert.has_error(function()
      vector(4, 3):with_clamped_magnitude(-10)
    end)
  end)
end)

describe('clamp_magnitude', function ()
  it('(4 -3).clamp_magnitude(2) => (1.6 -1.2)', function ()
    local v = vector(4, -3)
    v:clamp_magnitude(2)
    assert.is_true(v:almost_eq(vector(1.6, -1.2)))
  end)
  it('(4 3).clamp_magnitude(10) => (4 3)', function ()
    local v = vector(4, 3)
    v:clamp_magnitude(10)
    assert.is_true(v:almost_eq(vector(4, 3)))
  end)
  it('(4 3).clamp_magnitude(5) => (4 3)', function ()
    local v = vector(4, 3)
    v:clamp_magnitude(5)
    assert.is_true(v:almost_eq(vector(4, 3)))
  end)
  it('(4 3).clamp_magnitude(0) => (0 0)', function ()
    local v = vector(4, 3)
    v:clamp_magnitude(0)
    assert.is_true(v:almost_eq(vector(0, 0)))
  end)
  it('(0 0).clamp_magnitude(5) => (0 0)', function ()
    local v = vector(0, -0)
    v:clamp_magnitude(5)
    assert.is_true(v:almost_eq(vector(0, 0)))
  end)
end)

describe('with_clamped_magnitude_cardinal', function ()
  it('(1 -1).with_clamped_magnitude_cardinal(1) => (1 -1)', function ()
    local vec = vector(1, -1)
    local clamped_vec = vec:with_clamped_magnitude_cardinal(1)
    assert.are_equal(clamped_vec, vector(1, -1))
    -- check that a copy of the vector is returned, not the same ref
    assert.is_false(rawequal(clamped_vec, vec))
  end)
  it('(4 -3).with_clamped_magnitude_cardinal(2) => (2 -2)', function ()
    assert.is_true(vector(4, -3):with_clamped_magnitude_cardinal(2):almost_eq(vector(2, -2)))
  end)
  it('(-4 2).with_clamped_magnitude_cardinal(3) => (-3 3)', function ()
    assert.is_true(vector(-4, 2):with_clamped_magnitude_cardinal(3):almost_eq(vector(-3, 2)))
  end)
  it('(4 -8).with_clamped_magnitude_cardinal(3 5) => (3 -5)', function ()
    assert.is_true(vector(4, -8):with_clamped_magnitude_cardinal(3, 5):almost_eq(vector(3, -5)))
  end)
  it('(0 0).with_clamped_magnitude_cardinal(5) => (0 0)', function ()
    local vec = vector(0, 0)
    local clamped_vec = vec:with_clamped_magnitude_cardinal(5)
    assert.are_equal(clamped_vec, vector(0, 0))
    -- check that a copy of the vector is returned, not the same ref
    assert.is_false(rawequal(clamped_vec, vec))
  end)
end)

describe('clamp_magnitude_cardinal', function ()
  it('(4 -3).clamp_magnitude_cardinal(2 6) => (2, -3)', function ()
    local v = vector(4, -3)
    v:clamp_magnitude_cardinal(2, 6)
    assert.is_true(v:almost_eq(vector(2, -3)))
  end)
  it('(4 3).clamp_magnitude_cardinal(10) => (4 3)', function ()
    local v = vector(4, 3)
    v:clamp_magnitude_cardinal(10)
    assert.is_true(v:almost_eq(vector(4, 3)))
  end)
  it('(-4 3).clamp_magnitude_cardinal(5 1) => (-4 1)', function ()
    local v = vector(-4, 3)
    v:clamp_magnitude_cardinal(5, 1)
    assert.is_true(v:almost_eq(vector(-4, 1)))
  end)
  it('(-4 -3).clamp_magnitude_cardinal(2) => (-2 -2)', function ()
    local v = vector(-4, -3)
    v:clamp_magnitude_cardinal(2)
    assert.is_true(v:almost_eq(vector(-2, -2)))
  end)
  it('(0 0).clamp_magnitude_cardinal(5) => (0 0)', function ()
    local v = vector(0, 0)
    v:clamp_magnitude_cardinal(5)
    assert.is_true(v:almost_eq(vector(0, 0)))
  end)
end)
