require("engine/test/bustedhelper")
require("engine/core/vector_ext_angle")

describe('unit_from_angle', function ()
  it('(vector.unit_from_angle(0) => 0', function ()
    assert.are_same(vector(1, 0), vector.unit_from_angle(0))
  end)
  it('vector.unit_from_angle(0.125) => (1/sqrt(2), -1/sqrt(2))', function ()
    assert.is_true(almost_eq_with_message(vector(1/sqrt(2), -1/sqrt(2)), vector.unit_from_angle(0.125)))
  end)
  it('vector.unit_from_angle(0.25) => vector(0, -1)', function ()
    assert.is_true(almost_eq_with_message(vector(0, -1), vector.unit_from_angle(0.25)))
  end)
  it('vector.unit_from_angle(0.5) => vector(-1, 0)', function ()
    assert.is_true(almost_eq_with_message(vector(-1, 0), vector.unit_from_angle(0.5)))
  end)
  it('vector.unit_from_angle(-60/360) => vector(0.5, sqrt(3)/2)', function ()
    assert.is_true(almost_eq_with_message(vector(0.5, sqrt(3)/2), vector.unit_from_angle(-1/6)))
  end)
end)

describe('rotated', function ()

  it('(1 -3).rotated(0) => (1 -3)', function ()
    assert.is_true(almost_eq_with_message(vector(1, -3), vector(1, -3):rotated(0)))
  end)

  it('(1 -3).rotated(0.125) => (-sqrt(2), - 2 * sqrt(2))', function ()
    assert.is_true(almost_eq_with_message(vector(-sqrt(2), - 2 * sqrt(2)), vector(1, -3):rotated(0.125)))
  end)

  it('(1 -3).rotated(0.25) => (1 -3).rotated_90_ccw = (-3, -1)', function ()
    assert.is_true(almost_eq_with_message(vector(-3, -1), vector(1, -3):rotated(0.25)))
  end)

  it('(1 -3).rotated(0.5) => (-1 3)', function ()
    assert.is_true(almost_eq_with_message(vector(-1, 3), vector(1, -3):rotated(0.5)))
  end)

  it('(1 -3).rotated(0.25) => (1 -3).rotated_90_cw = (3, 1)', function ()
    assert.is_true(almost_eq_with_message(vector(3, 1), vector(1, -3):rotated(-0.25)))
  end)

end)

describe('rotated_90_cw', function ()
  it('(1 -3).rotated_90_cw() => (3, 1)', function ()
    assert.are_same(vector(3, 1), vector(1, -3):rotated_90_cw())
  end)
end)

describe('rotate_90_cw_inplace', function ()
  it('(1 -3).rotate_90_cw_inplace() => (3, 1)', function ()
    local v = vector(1, -3)
    v:rotate_90_cw_inplace()
    assert.are_same(vector(3, 1), v)
  end)
end)

describe('rotated_90_ccw', function ()
  it('(1 -3).rotated_90_ccw() => (-3, -1)', function ()
    assert.are_same(vector(-3, -1), vector(1, -3):rotated_90_ccw())
  end)
end)

describe('rotate_90_ccw_inplace', function ()
  it('(1 -3).rotate_90_ccw_inplace() => (-3, -1)', function ()
    local v = vector(1, -3)
    v:rotate_90_ccw_inplace()
    assert.are_same(vector(-3, -1), v)
  end)
end)
