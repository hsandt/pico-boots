require("engine/test/bustedhelper")
require("engine/core/string")  -- already in engine/common, but added for clarity

describe('joinstr_table', function ()
  it('joinstr_table("_" {nil 5 "at" nil}) => "[nil]_5_at"', function ()
    assert.are_equal("[nil]_5_at", joinstr_table("_", {nil, 5, "at", nil}))
  end)
  it('joinstr_table("comma " nil 5 "at" {}) => "[nil]comma 5comma atcomma [table]"', function ()
    assert.are_equal("[nil], 5, at, [table]", joinstr_table(", ", {nil, 5, "at", {}}))
  end)
  it('joinstr_table(", ", {nil, 5, "at", {}}, nice_dump) => "[nil], 5, "at", {}"', function ()
    assert.are_equal("[nil], 5, \"at\", {}", joinstr_table(", ", {nil, 5, "at", {}}, nice_dump))
  end)
end)

describe('joinstr', function ()
  it('joinstr("", nil, 5, "at", nil) => "[nil]5at"', function ()
    assert.are_equal("[nil]5at", joinstr("", nil, 5, "at", nil))
  end)
  it('joinstr(", ", nil, 5, "at", {}) => "[nil], 5, at, [table]"', function ()
    assert.are_equal("[nil], 5, at, [table]", joinstr(", ", nil, 5, "at", {}))
  end)
end)

describe('wwrap', function ()
  -- bugfix history: +
  it('wwrap("hello", 5) => "hello"', function ()
    assert.are_equal("hello", wwrap("hello", 5))
  end)
  -- bugfix history: +
  it('wwrap("hello world", 5) => "hello\nworld"', function ()
    assert.are_equal("hello\nworld", wwrap("hello world", 5))
  end)
  -- bugfix history: +
  it('wwrap("hello world", 10) => "hello\nworld"', function ()
    assert.are_equal("hello\nworld", wwrap("hello world", 10))
  end)
  it('wwrap("hello world", 11) => "hello world"', function ()
    assert.are_equal("hello world", wwrap("hello world", 11))
  end)
  -- bugfix history: +
  it('wwrap("toolongfromthestart", 5) => "toolongfromthestart" (we can\'t warp at all, give up)', function ()
    assert.are_equal("toolongfromthestart", wwrap("toolongfromthestart", 5))
  end)
  it('wwrap("toolongfromthestart this is okay", 5) => "toolongfromthestart\nthis\nis\nokay" (we can\'t warp at all, give up)', function ()
    assert.are_equal("toolongfromthestart\nthis\nis\nokay", wwrap("toolongfromthestart this is okay", 5))
  end)
  it('wwrap("hello\nworld", 5) => "hello\nworld"', function ()
    assert.are_equal("hello\nworld", wwrap("hello\nworld", 5))
  end)
  it('wwrap("hello\n\nworld", 5) => "hello\n\nworld"', function ()
    assert.are_equal("hello\n\nworld", wwrap("hello\n\nworld", 5))
  end)
  it('wwrap("hello world\nhow are you today?", 8) => "hello\nworld\nhow are\nyou\ntoday?"', function ()
    assert.are_equal("hello\nworld\nhow are\nyou\ntoday?", wwrap("hello world\nhow are you today?", 8))
  end)
  it('wwrap("short\ntoolongfromthestart\nshort again", 8) => "short\ntoolongfromthestart\nshort\nagain"', function ()
    assert.are_equal("short\ntoolongfromthestart\nshort\nagain", wwrap("short\ntoolongfromthestart\nshort again", 8))
  end)
end)

describe('compute_char_size', function ()
  it('compute_char_size("hello") => (5, 1)', function ()
    assert.are_same({5, 1}, {compute_char_size("hello")})
  end)
  it('compute_char_size("hello\nworld!") => (6, 2)', function ()
    assert.are_same({6, 2}, {compute_char_size("hello\nworld!")})
  end)
  it('compute_char_size("very\n\nend\n\n") => (4, 5)', function ()
    assert.are_same({4, 5}, {compute_char_size("very\n5\nend\n\n")})
  end)
  it('compute_char_size("\nlong\nlongest  \nok") => (9, 4)', function ()
    assert.are_same({9, 4}, {compute_char_size("\nlong\nlongest  \nok")})
  end)
end)

describe('compute_size', function ()
  it('compute_size("hello") => (21, 7)', function ()
    assert.are_same({21, 7}, {compute_size("hello")})
  end)
  it('compute_size("hello\nworld!") => (25, 13)', function ()
    assert.are_same({25, 13}, {compute_size("hello\nworld!")})
  end)
  it('compute_size("very\n\nend\n\n") => (17, 31)', function ()
    assert.are_same({17, 31}, {compute_size("very\n5\nend\n\n")})
  end)
  it('compute_size("\nlong\nlongest  \nok") => (37, 25)', function ()
    assert.are_same({37, 25}, {compute_size("\nlong\nlongest  \nok")})
  end)
end)

describe('strspl', function ()
  it('strspl("", " ") => {""}', function ()
    assert.are_same({""}, strspl("", " "))
  end)
  it('strspl("hello", " ") => {"hello"}', function ()
    assert.are_same({"hello"}, strspl("hello", " "))
  end)
  it('strspl("hello world", " ") => {"hello", "world"}', function ()
    assert.are_same({"hello", "world"}, strspl("hello world", " "))
  end)
  it('strspl("hello world", "l") => {"he", "", "o wor", "d"} (multiple separators leave empty strings)', function ()
    assert.are_same({"he", "", "o wor", "d"}, strspl("hello world", "l"))
  end)
  it('strspl("hello\nworld", "\n") => {"hello", "world"}', function ()
    assert.are_same({"hello", "world"}, strspl("hello\nworld", "\n"))
  end)
  it('strspl("||a||b||", "|", false) => {"", "", "a", "", "b", "", ""}', function ()
    assert.are_same({"", "", "a", "", "b", "", ""}, strspl("||a||b||", "|", false))
  end)
  it('strspl("||a||b||", "|", true) => {"a", "b"}', function ()
    assert.are_same({"a", "b"}, strspl("||a||b||", "|", true))
  end)
  it('strspl("||a||b||c", "|", true) => {"a", "b", "c"}', function ()
    assert.are_same({"a", "b", "c"}, strspl("||a||b||c", "|", true))
  end)
  it('strspl(",;a,,b;,c", {",", ";"}, false) => {"", "", "a", "", "b", "", "c"}', function ()
    assert.are_same({"", "", "a", "", "b", "", "c"}, strspl(",;a,,b;,c", {',', ';'}, false))
  end)
  it('strspl(",;a,,b;,c", {",", ";"}, true) => {"a", "b", "c"}', function ()
    assert.are_same({"a", "b", "c"}, strspl(",;a,,b;,c", {',', ';'}, true))
  end)
  it('strspl("hello world", "lo") => {"hello world"} (multicharacter not supported)', function ()
    assert.are_same({"hello world"}, strspl("hello world", "lo"))
  end)
end)
